/*
库是一种特殊的程序，不能单独运行
静态库和动态库（共享库）：
静态库：在程序的链接阶段被复制到程序中；
动态库：在程序的链接阶段没有被复制到程序中，而是程序在运行时由系统动态加载到内存中供程序调用；
库的好处：1.代码保密 2.方便部署和分发

◼ 命名规则：
    ◆ Linux : libxxx.so
        lib : 前缀（固定）
        xxx : 库的名字，自己起
        .so : 后缀（固定）
        在Linux下是一个可执行文件
    ◆ Windows : libxxx.dll

◼ 动态库的制作：
    ◼ 动态库的制作：
    ◆ gcc 得到 .o 文件，得到和位置无关的代码
    gcc -c –fpic/-fPIC a.c b.c
    ◆ gcc 得到动态库
    gcc -shared a.o b.o -o libcalc.so
◼ 动态库的使用
-I 表示去哪里搜索包含的头文件
-L 指定当前库的路径
-l 指定库的名称
gcc main.c -o app -I ./include/ -L ./lib/ -l calc

◼ 动态库的原理
// ◼ 静态库：GCC 进行链接时，会把静态库中代码打包到可执行程序中
// ◼ 动态库：GCC 进行链接时，动态库的代码不会被打包到可执行程序中
// ◼ 程序启动之后，动态库会被动态加载到内存中，通过 ldd （list dynamic 
// dependencies）命令检查动态库依赖关系
// ◼ 如何定位共享库文件呢？
// 当系统加载可执行代码时候，能够知道其所依赖的库的名字，但是还需要知道绝对路径。
// 此时就需要系统的动态载入器来获取该绝对路径。
// 对于elf格式的可执行程序，是由ld-linux.so（动态载入器）来完成的，它先后搜索elf文件的 DT_RPATH段 ——> 
环境变量LD_LIBRARY_PATH ——> /etc/ld.so.cache文件列表 ——> /lib/，/usr/lib
// 目录找到库文件后将其载入内存

*/